using _8labbib;

namespace _8labbibf
{
    public partial class Form1 : Form
    {
        Rectagle rectagle;     
        Ellipse ellipse;
        Square square;
        Circle circle;

        public Form1()
        {
            InitializeComponent();  //вызов

            Bitmap bitmap = new Bitmap(pictureBox1.ClientSize.Width, pictureBox1.ClientSize.Height); //создаем компоненты
            Pen pen = new Pen(Color.Black, 2);

            Init.bitmap = bitmap;           //настраиваем объект Init, предоставляя ему ссылки на три объкта
            Init.pen = pen;
            Init.pictureBox = pictureBox1;

            rectagle = null!;       //присваиваем значение переменным, чтобы они не ссылались ни на какой объект
            ellipse = null!;
            square = null!;
            circle = null!;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            try
            {                                          //проверяет являются ли значения положительными и не выходит ли фигура за границу
                rectagle = new _8labbib.Rectagle(int.Parse(textBox1.Text), int.Parse(textBox2.Text), int.Parse(textBox3.Text), int.Parse(textBox4.Text)); 
                if (int.Parse(textBox1.Text) > 0 && int.Parse(textBox2.Text) > 0 && int.Parse(textBox3.Text) > 0 && int.Parse(textBox4.Text) > 0 &&
                    int.Parse(textBox1.Text) + int.Parse(textBox3.Text) <= Init.pictureBox.Width && int.Parse(textBox2.Text) + int.Parse(textBox4.Text) <= Init.pictureBox.Height)
                {
                    rectagle.Draw();
                    ShapeContainer.AddFigure(rectagle);
                    comboBox1.Items.Add(rectagle);


                }
                else MessageBox.Show("Выход за границу"); 
            }
            catch
            {
                MessageBox.Show("Вводите только числа"); 
            }
            textBox1.Clear(); //чистка, если ошибка
            textBox2.Clear();
            textBox3.Clear();
            textBox4.Clear();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            try
            {                                         
                square = new Square(int.Parse(textBox12.Text), int.Parse(textBox13.Text), int.Parse(textBox14.Text)); 
                if (int.Parse(textBox12.Text) > 0 && int.Parse(textBox13.Text) > 0 && int.Parse(textBox14.Text) > 0 &&
                    int.Parse(textBox12.Text) + int.Parse(textBox14.Text) <= Init.pictureBox.Width && int.Parse(textBox13.Text) + int.Parse(textBox14.Text) <= Init.pictureBox.Height)
                {
                    square.Draw();
                    ShapeContainer.AddFigure(square);
                    comboBox1.Items.Add(square);
                }
                else MessageBox.Show("Выход за границу"); 
            }
            catch
            {
                MessageBox.Show("Вводите только числа"); 
            }
            textBox12.Clear(); 
            textBox13.Clear();
            textBox14.Clear();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            try
            {
                ellipse = new Ellipse(int.Parse(textBox7.Text), int.Parse(textBox8.Text), int.Parse(textBox9.Text), int.Parse(textBox10.Text));
                if (int.Parse(textBox7.Text) > 0 && int.Parse(textBox8.Text) > 0 && int.Parse(textBox9.Text) > 0 && int.Parse(textBox10.Text) > 0 &&
                    int.Parse(textBox7.Text) + int.Parse(textBox8.Text) <= Init.pictureBox.Width && int.Parse(textBox9.Text) + int.Parse(textBox10.Text) <= Init.pictureBox.Height)
                {
                    ellipse.Draw();
                    ShapeContainer.AddFigure(ellipse);
                    comboBox1.Items.Add(ellipse);
                }
                else MessageBox.Show("Выход за границу");
            }
            catch
            {
                MessageBox.Show("Вводите только числа");
            }
            textBox7.Clear(); 
            textBox8.Clear();
            textBox9.Clear();
            textBox10.Clear();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            try
            {                                           
                circle = new Circle(int.Parse(textBox11.Text), int.Parse(textBox15.Text), int.Parse(textBox16.Text)); 
                if (int.Parse(textBox16.Text) > 0 && int.Parse(textBox15.Text) > 0 && int.Parse(textBox11.Text) > 0 &&
                    int.Parse(textBox11.Text) + int.Parse(textBox16.Text) <= Init.pictureBox.Width && int.Parse(textBox15.Text) + int.Parse(textBox16.Text) <= Init.pictureBox.Height)
                {
                    circle.Draw();
                    ShapeContainer.AddFigure(circle);
                    comboBox1.Items.Add(circle);
                }
                else MessageBox.Show("Выход за границу"); 
            }
            catch
            {
                MessageBox.Show("Вводите только числа"); 
            }
            textBox11.Clear(); 
            textBox15.Clear();
            textBox16.Clear();
        }

        private void button5_Click(object sender, EventArgs e) //кнопка
        {
            Form2 form2 = new Form2(); //новое окно
            form2.ShowDialog(); //обновление
            form2.Close(); //закрытие

            comboBox1.Items.Clear();

            foreach (Figure figur in ShapeContainer.figureList) //цикл foreach перебирает каждый элемент ShapeContainer.figureList
            {
                comboBox1.Items.Add(figur);  // каждая figur добавляется как новый элемент в Items, для доступа пользоватеоя
            }

            textBox1.Clear(); //очищение
            textBox2.Clear();
            textBox3.Clear();
            textBox4.Clear();
        }

        private void button6_Click(object sender, EventArgs e) 
        {
            Form3 form3 = new Form3();
            form3.ShowDialog();
            form3.Close();

            comboBox1.Items.Clear();

            foreach (Figure figur in ShapeContainer.figureList)
            {
                comboBox1.Items.Add(figur);
            }

            textBox1.Clear();
            textBox2.Clear();
            textBox3.Clear();
            textBox4.Clear();
        }

        private void button10_Click(object sender, EventArgs e) //это функция по типу новый документ или очистить все
        {
            Graphics g = Graphics.FromImage(Init.bitmap);
            g.Clear(Color.White);
            Init.pictureBox.Image = Init.bitmap;

            ShapeContainer.figureList.Clear();

            comboBox1.Items.Clear();
        }

        private void button8_Click(object sender, EventArgs e) // Удалить выбранную фигуру с  помощью интерфейса
        {
            Figure figure = (Figure)comboBox1.SelectedItem; // получает выбранный элемент
            if (figure != null) figure.DeleteF(figure); //если фигура, то вызывает метод DeleteF
            else
            {
                MessageBox.Show("Нет фигур для удаления"); //если не фигура, то ошибка
            }
            comboBox1.Items.Clear(); //очищает и заново заполняет

            foreach (Figure figur in ShapeContainer.figureList)
            {
                comboBox1.Items.Add(figur);
            }

            if (textBox5.Text != "") //очищает два текстовых поля
                textBox5.Text = "";

            if (textBox6.Text != "")
                textBox6.Text = "";

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void button9_Click(object sender, EventArgs e)
        {
            if (comboBox1.SelectedItem == null) 
            {
                MessageBox.Show("Выберите фигуру для перемещения"); //если поле пустое, то ошибка
                return; //заново
            }

            if (string.IsNullOrWhiteSpace(textBox5.Text) || string.IsNullOrWhiteSpace(textBox6.Text))
            {
                MessageBox.Show("Заполните оба поля координат"); 
                return;
            }

                //выполняется, если первая проверка не сработала
            if (!int.TryParse(textBox5.Text, out int x) || !int.TryParse(textBox6.Text, out int y))
            {
                MessageBox.Show("Введите числовые значения координат");
                return;
            }

            Figure figure = (Figure)comboBox1.SelectedItem;
            figure.MoveTo(x, y); //берет объект для смещения
        }

        private void button7_Click(object sender, EventArgs e)
        {
            try
            {
                if (!int.TryParse(textBox18.Text, out int x) || //преобразовывает строку в целое симло, если все топ, то он возвращает true и записывает ее в result
                    !int.TryParse(textBox19.Text, out int y) ||
                    !int.TryParse(textBox20.Text, out int size))
                {
                    MessageBox.Show("Введите корректные числовые значения");
                    return;
                }

                if (size < 50) 
                {
                    MessageBox.Show("Размер должен быть не менее 50 пикселей");
                    return;
                }

                int minX = size / 2;
                int minY = size / 2;
                int maxX = Init.pictureBox.Width - size / 2;
                int maxY = Init.pictureBox.Height - size / 2;

                if (x < minX || y < minY || x > maxX || y > maxY)
                {
                    MessageBox.Show($"Координаты должны быть в пределах: X({minX}-{maxX}), Y({minY}-{maxY})");
                    return;
                }

                Car car = new Car(x, y, size);
                car.Draw();
                ShapeContainer.AddFigure(car); //добавляет машину в список граф объектов
                comboBox1.Items.Add(car); //добавляет ее, чтобы пользователь мог ее выбрать
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка создания машины: {ex.Message}");
            }
            finally
            {
                textBox18.Clear();
                textBox19.Clear();
                textBox20.Clear();
            }
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {

        }

        private void label4_Click(object sender, EventArgs e)
        {

        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }

        private void textBox20_TextChanged(object sender, EventArgs e)
        {

        }

        private void textBox_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsDigit(e.KeyChar) && e.KeyChar != '\b' && !char.IsControl(e.KeyChar))
            {                     //не дает ввсети всякую фигню
                e.Handled = true; //потому что этот  метод останавливает
            }
        }

        private void textBox5_TextChanged(object sender, EventArgs e)
        {
            TextBox textBox = (TextBox)sender; //тоже гарантирует толкьо ввод чисел

            if (string.IsNullOrEmpty(textBox.Text))
                return;

            if (textBox.Text.Any(c => !char.IsDigit(c)))
            {
                string cleanedText = new string(textBox.Text.Where(char.IsDigit).ToArray());

                int cursorPos = textBox.SelectionStart;

                textBox.Text = cleanedText;

                textBox.SelectionStart = Math.Min(cursorPos, textBox.Text.Length);
            }
        }

        private void textBox6_TextChanged(object sender, EventArgs e)
        {
            TextBox textBox = (TextBox)sender;

            if (string.IsNullOrEmpty(textBox.Text))
                return;

            if (textBox.Text.Any(c => !char.IsDigit(c)))
            {
                string cleanedText = new string(textBox.Text.Where(char.IsDigit).ToArray());

                int cursorPos = textBox.SelectionStart;

                textBox.Text = cleanedText;

                textBox.SelectionStart = Math.Min(cursorPos, textBox.Text.Length);
            }
        }

        private void textBox15_TextChanged(object sender, EventArgs e)
        {

        }
    }
}
